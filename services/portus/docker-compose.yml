version: "3.7"

services:
  portus:
    image: opensuse/portus:head # 2.4.3 does not allow for nested images key
    init: true
    restart: unless-stopped
    environment:
      - PORTUS_MACHINE_FQDN_VALUE=${MACHINE_FQDN}
      - PORTUS_SECURITY_CLAIR_SERVER=http://clair:6060

      # DB. The password for the database should definitely not be here. You are
      # probably better off with Docker Swarm secrets.
      - PORTUS_DB_HOST=db
      - PORTUS_DB_DATABASE=portus_production
      - PORTUS_DB_PASSWORD=${DATABASE_PASSWORD}
      - PORTUS_DB_POOL=5

      # Secrets. It can possibly be handled better with Swarm's secrets.
      - PORTUS_SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - PORTUS_KEY_PATH=/certificates/portus.key
      # - PORTUS_KEY_PATH=/run/secrets/portus.key
      - PORTUS_PASSWORD=${PORTUS_PASSWORD}

      # SSL
      - PORTUS_PUMA_TLS_KEY=/certificates/portus.key
      - PORTUS_PUMA_TLS_CERT=/certificates/portus.crt
      # - PORTUS_PUMA_TLS_KEY=/run/secrets/portus.key
      # - PORTUS_PUMA_TLS_CERT=/run/secrets/portus.crt

      # Deleting
      - PORTUS_DELETE_ENABLED=true

      # NGinx is serving the assets instead of Puma. If you want to change this,
      # uncomment this line.
      #- RAILS_SERVE_STATIC_FILES='true'
    networks:
      - internal
    volumes:
      - portus_static_data:/srv/Portus/public
    secrets:
      - source: portus.key
        target: /certificates/portus.key
      - source: portus.crt
        target: /certificates/portus.crt
      # only needed in self-signed case
      - source: rootca.crt
        target: /certificates/rootca.crt

  background:
    image: opensuse/portus:head
    init: true
    restart: unless-stopped
    depends_on:
      - portus
      - db
    environment:
      # Theoretically not needed, but cconfig's been buggy on this...
      - CCONFIG_PREFIX=PORTUS
      - PORTUS_MACHINE_FQDN_VALUE=${MACHINE_FQDN}
      - PORTUS_SECURITY_CLAIR_SERVER=http://clair:6060

      # DB. The password for the database should definitely not be here. You are
      # probably better off with Docker Swarm secrets.
      - PORTUS_DB_HOST=db
      - PORTUS_DB_DATABASE=portus_production
      - PORTUS_DB_PASSWORD=${DATABASE_PASSWORD}
      - PORTUS_DB_POOL=5

      # Secrets. It can possibly be handled better with Swarm's secrets.
      - PORTUS_SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - PORTUS_KEY_PATH=/certificates/portus.key
      - PORTUS_PASSWORD=${PORTUS_PASSWORD}

      - PORTUS_BACKGROUND=true
    networks:
      - internal
    secrets:
      - source: portus.key
        target: /certificates/portus.key

  db:
    image: library/mariadb:10.0.23
    init: true
    restart: unless-stopped
    command: mysqld --character-set-server=utf8 --collation-server=utf8_unicode_ci --init-connect='SET NAMES UTF8;' --innodb-flush-log-at-trx-commit=0
    environment:
      - MYSQL_DATABASE=portus_production

      # Again, the password shouldn't be handled like this.
      - MYSQL_ROOT_PASSWORD=${DATABASE_PASSWORD}
    volumes:
      - mariadb_data:/var/lib/mysql
    networks:
      - internal

  registry:
    image: library/registry:2.7
    init: true
    restart: unless-stopped
    command: ["/bin/sh", "/etc/docker/registry/init"]
    environment:
      # Authentication
      REGISTRY_AUTH_TOKEN_REALM: https://${MACHINE_FQDN}/v2/token
      REGISTRY_AUTH_TOKEN_SERVICE: ${MACHINE_FQDN}
      REGISTRY_AUTH_TOKEN_ISSUER: ${MACHINE_FQDN}
      REGISTRY_AUTH_TOKEN_ROOTCERTBUNDLE: /secrets/portus.crt

      # SSL
      REGISTRY_HTTP_TLS_CERTIFICATE: /secrets/portus.crt
      REGISTRY_HTTP_TLS_KEY: /secrets/portus.key

      # Storage
      REGISTRY_STORAGE: s3
      REGISTRY_STORAGE_S3_ACCESSKEY: ${S3_ACCESSKEY}
      REGISTRY_STORAGE_S3_SECRETKEY: ${S3_SECRETKEY}
      REGISTRY_STORAGE_S3_REGION: "us-east-1"
      REGISTRY_STORAGE_S3_CHUNKSIZE: 16777216
      REGISTRY_STORAGE_S3_REGIONENDPOINT: ${S3_ENDPOINT}
      REGISTRY_STORAGE_S3_SECURE: "false"
      REGISTRY_STORAGE_S3_BUCKET: ${S3_REGISTRY_BUCKET}
      REGISTRY_HTTP_SECRET: ${SECRET_KEY_BASE}

      REGISTRY_STORAGE_CACHE_BLOBDESCRIPTOR: inmemory

      REGISTRY_STORAGE_REDIRECT_DISABLE: "true"

      # Portus endpoint
      REGISTRY_NOTIFICATIONS_ENDPOINTS: >
        - name: portus
          url: https://${MACHINE_FQDN}/v2/webhooks/events
          timeout: 2000ms
          threshold: 5
          backoff: 1s
    volumes:
      - registry_data:/var/lib/registry
    networks:
      - internal
    configs:
      # - source: registry_config.yml
      #   target: /etc/docker/registry/config.yml
      #   mode: 0644
      - source: registry_init
        target: /etc/docker/registry/init
        mode: 0755
    secrets:
      - source: portus.key
        target: /secrets/portus.key
      - source: portus.crt
        target: /secrets/portus.crt
      # only needed in self-signed case
      - source: rootca.crt
        target: /secrets/rootca.crt
  clair:
    image: quay.io/coreos/clair:v2.0.1
    init: true
    restart: unless-stopped
    depends_on:
      - postgres
    command: [-config, /clair.yml]
    networks:
      - internal
    configs:
      - source: clair_config.yml
        target: /clair.yml
        mode: 0644

  postgres:
    image: library/postgres:10-alpine
    init: true
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: portus
    networks:
      - internal

  nginx:
    image: library/nginx:alpine
    init: true
    restart: unless-stopped
    command:  /bin/sh -c "envsubst '\$NGINX_HOST' < /etc/nginx/nginx.template.conf > /etc/nginx/nginx.conf && exec nginx -g 'daemon off;'"
    volumes:
      - portus_static_data:/srv/Portus/public:ro
    environment:
      NGINX_HOST: ${MACHINE_FQDN}
    ports:
      - 443:443
    networks:
      - default
      - internal
    configs:
      - source: nginx_nginx.conf
        target: /etc/nginx/nginx.template.conf
        mode: 0644
    secrets:
      - source: portus.key
        target: /secrets/portus.key
      - source: portus.crt
        target: /secrets/portus.crt

volumes:
  portus_static_data:
  registry_data:
  mariadb_data:

networks:
  default:
  internal:

configs:
  registry_config.yml:
    file: ./registry/config.yml
  registry_init:
    file: ./registry/init
  nginx_nginx.conf:
    file: ./nginx/nginx.conf
  clair_config.yml:
    file: ./clair/clair.yml
secrets:
  portus.key:
    file: ./secrets/portus.key
  portus.crt:
    file: ./secrets/portus.crt
  rootca.crt:
    file: ./secrets/rootca.crt
