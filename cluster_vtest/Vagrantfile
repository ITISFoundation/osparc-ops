# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'yaml'

CLUSTER_SETTINGS_FILE = "./cluster_settings.yml"
CLUSTER_SECRETS_FILE = "./cluster_secrets.yml"
ANSIBLE_INV_FILE = "./conf/generated/ansible-hosts"
ETC_HOSTS_FILE = "./conf/generated/etc-hosts"

def generate_ansible_inventory(settings, ansible_inv_file)
  File.delete(ansible_inv_file) if File.exist?(ansible_inv_file)
  File.open(ansible_inv_file, 'w') do |f|
    ip = settings['cluster']['ip_start']

    f.write "[ansible]\n"
    f.write "#{settings['ansible']['hostname']} "
    f.write "ansible_host=127.0.0.1 "
    f.write "ansible_connection=local\n\n"

    settings['cluster']['groups'].each do |key, value|
      f.write "[#{key}]\n"
      (1..value['qty']).each do |i|
        ip += 1
        suffix = sprintf "#{value['hostname_suffix']}", i
        f.write "#{value['hostname_prefix']}#{suffix} "
        f.write "ansible_host=#{settings['cluster']['ip_block']}.#{ip} "
        f.write "ansible_port=#{settings['ansible']['port']} "
        f.write "ansible_user=#{settings['ansible']['user']}\n"
      end
      f.write "\n"
    end
  end
end

def generate_etc_hosts(settings, etc_hosts_file)
  File.delete(etc_hosts_file) if File.exist?(etc_hosts_file)
  File.open(etc_hosts_file, 'w') do |f|
    ip = settings['cluster']['ip_start']
    f.write "#{settings['ansible']['hostname']} #{settings['cluster']['ip_block']}.#{ip}\n"
    settings['cluster']['groups'].each do |key, value|
      (1..value['qty']).each do |i|
        ip += 1
        suffix = sprintf "#{value['hostname_suffix']}", i
        f.write "#{value['hostname_prefix']}#{suffix} "
        f.write "#{settings['cluster']['ip_block']}.#{ip}\n"
      end
    end
  end
end

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  settings = YAML.load_file(CLUSTER_SETTINGS_FILE)
  if File.exist?(CLUSTER_SECRETS_FILE) then
    File.open(CLUSTER_SECRETS_FILE) do |f|
      secrets = YAML.load_file(CLUSTER_SECRETS_FILE)
    end
  end

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "#{settings['vagrant_vm_box']}"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  #config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder ".", "/vagrant", type: "nfs"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end

  generate_ansible_inventory(settings, ANSIBLE_INV_FILE)
  generate_etc_hosts(settings, ETC_HOSTS_FILE)

  # Make a dict out of hostnames--ips for convenience
  host_ips = Hash[*File.read(ETC_HOSTS_FILE).split(/[ \n]+/)]

  # ansible control node, so your host doesn't need ansible setup
  config.vm.define "#{settings['ansible']['hostname']}" do |ans|
    ans.vm.provider "virtualbox" do |vb|
      vb.memory = settings['ansible']['mem']
      vb.cpus = settings['ansible']['cpus']
    end
    ans.vm.network :private_network, ip: "#{host_ips[settings['ansible']['hostname']]}"
    ans.vm.hostname = "#{settings['ansible']['hostname']}"
    ans.vm.provision "shell" do |s|
        s.path = "./provision.sh"
        s.args = "ansible"
    end
  end

  # create cluster groups
  settings['cluster']['groups'].each do |key, value|
    (1..value['qty']).each do |i|
      suffix = sprintf "#{value['hostname_suffix']}", i
      this_hostname = "#{value['hostname_prefix']}#{suffix}"
      config.vm.define "#{this_hostname}" do |node|
        node.vm.provider "virtualbox" do |vb|
          vb.memory = value['mem']
          vb.cpus = value['cpus']
          # ToDo: Finish this capability... needs to check if extra_storage is defined for each group or not
          #diskimage = "./storage/#{this_hostname}-data.vdi"
          #unless File.exists?(diskimage)
          #  vb.customize ["createhd", "--filename", diskimage, "--variant", "Fixed", "--size", value['extra_storage']]
          #end
          ### to list available storage controlers on a VM using: vboxmanage showinfo <vmname>
          #vb.customize ["storageattach", :id, "--storagectl", "SCSI", "--port", 2, "--device", 0, "--type", "hdd", "--medium", diskimage] 
        end
        node.vm.network :private_network, ip: "#{host_ips[this_hostname]}"
        node.vm.hostname = "#{this_hostname}"
        node.vm.provision "shell" do |s|
          s.path = "./provision.sh"
          s.args = "#{key}"
        end
      end
    end
  end

  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  #config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # yum -y install nano net-tools
  #SHELL
#config.vm.provision "shell", path: "provision-node.sh"
end
