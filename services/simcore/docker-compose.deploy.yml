# osparc-simcore stack (framework stack)
# NOTES :
# LOGSPOUT_MULTILINE is used to tell to Logspout, which is used by GrayLog, to handle multiline support of the logs of the concerned container. Please add with every new osparc-simcore service.
# See this issue to have more informations : https://github.com/ITISFoundation/osparc-ops/issues/40
version: "3.7"
services:
  webserver:
    networks:
      - public
      - monitored
    environment:
      - LOGSPOUT_MULTILINE=true
    deploy:
      labels:
        # ssl header necessary so that socket.io upgrades correctly from polling to websocket mode. the middleware must be attached to the right connection.
        # NOTE: in deploy mode with SSL they must be set to https!
        - traefik.http.middlewares.simcore_sslheader.headers.customrequestheaders.X-Forwarded-Proto=https

  # need to pass self-signed certificate in /usr/local/share/ca-certificates and call update-ca-certificates
  storage:
    secrets:
      - source: rootca.crt
        target: /usr/local/share/ca-certificates/osparc.crt
    environment:
      # minio sdk uses this env to use self-signed certs
      - SSL_CERT_FILE=/usr/local/share/ca-certificates/osparc.crt
      - LOGSPOUT_MULTILINE=true

    networks:
      - monitored

  director:
    environment:
      - LOGSPOUT_MULTILINE=true
      # needed to pass the self-signed certificate to the spawned services
      - DIRECTOR_SELF_SIGNED_SSL_FILENAME=/usr/local/share/ca-certificates/osparc.crt
      # - DIRECTOR_SELF_SIGNED_SSL_SECRET_ID=some_id
      - DIRECTOR_SELF_SIGNED_SSL_SECRET_NAME=rootca.crt

  sidecar:
    environment:
      - LOGSPOUT_MULTILINE=true

  rabbit:
    networks:
      - monitored
    environment:
      - LOGSPOUT_MULTILINE=true

  postgres:
    networks:
      - monitored
    environment:
      - LOGSPOUT_MULTILINE=true
  # in clusters one or more nodes are typically defined as THE postgres nodes.
  #   deploy:
  #     placement:
  #       constraints:
  #         - node.labels.postgres==true

  traefik:
    command:
      # TEMP
      - "--api=true"
      - "--api.dashboard=true"
      - "--log.level=DEBUG"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
      - "--entryPoints.metrics.address=:8082"
      - "--metrics.prometheus.entryPoint=metrics"
      - "--entryPoints.http.address=:80"
      - "--entryPoints.traefik_dashboard.address=:8080"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.network=${SWARM_STACK_NAME}_default"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedByDefault=false"
      - "--providers.docker.constraints=Label(`io.simcore.zone`, `${TRAEFIK_SIMCORE_ZONE}`)"
      - "--tracing=true"
      - "--tracing.jaeger=true"
      - "--tracing.jaeger.samplingServerURL=http://jaeger:5778/sampling"
      - "--tracing.jaeger.localAgentHostPort=jaeger:6831"
    networks:
      - monitored
      - public
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=${PUBLIC_NETWORK}
        - traefik.http.services.${SWARM_STACK_NAME}_traefik.loadbalancer.server.port=80
        - traefik.http.routers.${SWARM_STACK_NAME}_traefik.rule=PathPrefix(`/`)
        - traefik.http.routers.${SWARM_STACK_NAME}_traefik.entrypoints=https
        - traefik.http.routers.${SWARM_STACK_NAME}_traefik.priority=1
        - traefik.http.routers.${SWARM_STACK_NAME}_traefik.tls=true
        - traefik.http.routers.${SWARM_STACK_NAME}_traefik.middlewares=gzip@docker, sslheader@docker

  whoami:
    image: "containous/whoami"
    deploy:
      labels:
        - io.simcore.zone=${TRAEFIK_SIMCORE_ZONE}
        - traefik.enable=true
        - traefik.http.services.${SWARM_STACK_NAME}_whoami.loadbalancer.server.port=80
        - traefik.http.routers.${SWARM_STACK_NAME}_whoami.rule=hostregexp(`{host:.+}`) && PathPrefix(`/whoami`)
        - traefik.http.routers.${SWARM_STACK_NAME}_whoami.entrypoints=http
        - traefik.http.routers.${SWARM_STACK_NAME}_whoami.priority=2
        - traefik.http.routers.${SWARM_STACK_NAME}_whoami.middlewares=gzip@docker

networks:
  public:
    external: true
    name: ${PUBLIC_NETWORK}
  monitored:
    external: true
    name: ${MONITORED_NETWORK}

# self-signed only
secrets:
  rootca.crt:
    external: true
