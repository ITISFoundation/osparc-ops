version: '3.7'

volumes:
    prometheus_data: {}
    grafana_data: {}
    alertmanager_data: {}

networks:
  internal:
    driver: overlay
    attachable: true
  monitored:
    name: ${MONITORED_NETWORK}
    external: true
  public:
    external: true
    name: ${PUBLIC_NETWORK}

configs:
  dockerd_config:
    file: ./dockerd-exporter/Caddyfile
  alertmanager_config:
    file: ./alertmanager/config.yml

services:

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention=${PROMETHEUS_RETENTION:-24h}'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.external-url=https://${MONITORING_DOMAIN}/prometheus/'
      - '--web.route-prefix=/'
    ports:
      - "9090"
    depends_on:
      - cadvisor
    networks:
      - internal
      - monitored
      - public
    #logging:
    #  driver: gelf
    #  options:
    #    gelf-address: "tcp://127.0.0.1:12201"
    deploy:
      placement:
        constraints:
          - node.role==manager
      labels:
        - traefik.enable=true
        - traefik.docker.network=${PUBLIC_NETWORK}
        # direct access through port
        - traefik.http.services.prometheus.loadbalancer.server.port=9090
        - traefik.http.routers.prometheus.rule=Host(`${MONITORING_DOMAIN}`) && PathPrefix(`/prometheus`)
        - traefik.http.routers.prometheus.entrypoints=https
        - traefik.http.routers.prometheus.tls=true
        # Let's encrypt use-case
        # - traefik.http.routers.prometheus.tls.certresolver=lehttpchallenge
        - traefik.http.middlewares.prometheus_stripprefixregex.stripprefixregex.regex=^/prometheus
        - traefik.http.routers.prometheus.middlewares=auth@docker, gzip@docker, prometheus_stripprefixregex
      resources:
        limits:
          memory: 2048M
        reservations:
          memory: 64M

  dockerd-exporter:
    # the docker engine(s) need to set the following in /etc/docker/daemon.json to provide prometheus metrics:
    # {"metrics-addr": "0.0.0.0:9323",
    # "experimental": true}
    image: stefanprodan/caddy
    networks:
      - internal
    environment:
      # Replace 172.18.0.1 with the docker_gwbridge address
      - DOCKER_GWBRIDGE_IP=172.18.0.1
    configs:
      - source: dockerd_config
        target: /etc/caddy/Caddyfile
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  node-exporter:
    # special node exporter that allows setting the node name to be more human readable later on in grafana.
    # very good description in there: https://github.com/stefanprodan/swarmprom
    image: stefanprodan/swarmprom-node-exporter:v0.16.0
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /etc/hostname:/etc/nodename # don't work with windows
    environment:
      - NODE_ID={{.Node.ID}}
    command:
      - '--path.sysfs=/host/sys'
      - '--path.procfs=/host/proc'
      - '--collector.textfile.directory=/etc/node-exporter/'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
      - '--no-collector.ipvs'
    networks:
      - internal
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
          
  nvidia-exporter:
    image: mindprince/nvidia_gpu_prometheus_exporter:0.1
    networks:
      - internal
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
          generic_resources:
            - discrete_resource_spec:
                kind: 'VRAM'
                value: 1

  alertmanager:
    image: prom/alertmanager
    ports:
      - "9093"
    volumes:
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    networks:
      - internal
    configs:
      - source: alertmanager_config
        target: /etc/alertmanager/config.yml
    deploy:
      placement:
        constraints:
           - node.role==manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  cadvisor:
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "8080"
    networks:
      - internal
      - monitored
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  postgres-exporter:
    image: wrouesnel/postgres_exporter
    ports:
      - "9187"
    networks:
      - internal
      - monitored
    environment:
      - DATA_SOURCE_NAME=${POSTGRES_EXPORTER_DATA_SOURCE_NAME}
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  grafana:
    dns:
      8.8.8.8
    image: grafana/grafana
    depends_on:
      - prometheus
    ports:
      - "3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    user: "104"
    networks:
      - internal
      - public
    deploy:
      placement:
        constraints:
          - node.role==manager
      #restart_policy:
      #  condition: on-failure
      labels:
        - traefik.enable=true
        - traefik.docker.network=${PUBLIC_NETWORK}
        # direct access through port
        - traefik.http.services.grafana.loadbalancer.server.port=3000
        - traefik.http.routers.grafana.rule=Host(`${MONITORING_DOMAIN}`) && PathPrefix(`/grafana`)
        - traefik.http.routers.grafana.entrypoints=https
        - traefik.http.routers.grafana.tls=true
        - traefik.http.middlewares.grafana_replace_regex.replacepathregex.regex=^/grafana/?(.*)$$
        - traefik.http.middlewares.grafana_replace_regex.replacepathregex.replacement=/$${1}
        - traefik.http.routers.grafana.middlewares=gzip@docker, grafana_replace_regex
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
